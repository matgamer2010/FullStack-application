BACKLOG 3/5:

## Backend

  * Status: Fazendo
  *
  * Não esquecer de usar a secret no Program.cs
  *
  - Montagem da Camada de WebScoket da Home Page:
    * Fazendo:
    - Agora sim vem a parte do JWT/ tokens, para fazer a requisição dos PRODUTOS --> ASP.NET Core


    Grupo 1: FEITO !

    Grupo 2:

    * Criar página dinâmica dos produtos (passar essas informações via URL+ criptografia b64) e verificar
    * Usar Stripe.js para gerar a página de Checkout

    Grupo 3:

    * Dockerização do projeto (Backend)
    * Kubernetes (Backend)
    * AWS (Backend)
    * CI/CD para automatizar o processo de deploy (Backend)


    - integrar Buffers para acelerar a requisição (Buffers junto ao cachê)


    - Fazer o API Gateway ()
    - Entender mais sobre o framework Express

  - Estudar mais sobre orientação a objeto em C#.
  - Como usei CORS para fazer a comunicação entre o React e o ASP.NET.
  - Criação automatica de pastas
  - Fazer testes unitários, com Node (no back), Jest (no front), PyTest (Django), xUnit(ASP.NET Core)

  - Implementar CI/CD com o GitHub Actions.
	
## Frontend

  - Alterar o Componente de Cabeçalho de acordo com a página em questão e se o usuário está logado.
    - Preparar express para consumir a API dos produtos e exibir isso no endpoint "localhost:3001/product"
    
  - Fazer uma lista de exercícios acerca do useState.
  - Criar a página de cada produto (Com base no Id). 
    - Lembrar de fazer a seção de descrição de cada Produto.
    - gerenciar estoque (Decidi que isso pode ficar por conta do React).
    - Sempre multiplicar o valor do produto por 1000 antes de enviar ao ASP.NET

## Backend

   
  - Configurar as URLs (Url fantasma do Django que fornece dados sobre cada item) para a ativação do Cachê, e elas são:
    - "/products" -> exibição dos produtos -> ASP.NET Core -> já lida com produtos (mais pesado)
    - "/usersLogin" -> exibição de dados de usuários -> lida com usuários (mais leve)

  - Implementar um serviço de emails para:
    - Confirmar o Cadastro
    - Confirmar compra
    - Ou configurar meu próprio smtp.

  - refatorar: users/views.py, pois apenas algumas views e url não são mais necessárias
  
  - Implementar um ChatBot para auxílio do cliente.

  - Testes automatizados

## Extras:

  - Fazer todos os Flashcards dos conteúdos estudados até então, os principais temas para flashcards são:
    - React
    - Javascript

  - Colocar os Direitos autorais no Footer (Criar uma página só para isso):

    Até agora, a lista é:

    - Banner da Homepage
    - A imagem de usuário Default
    - Ícone de "delete"

  - Marketing do projeto.

## Desenvolvimento do Mobile com React Native.